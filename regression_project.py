# -*- coding: utf-8 -*-
"""Regression Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yrS5fiKUgQXzEIKmkqiq2X9vRJc0tgdw
"""

#importing The Dependencies
import numpy as np
import pandas as pd
from matplotlib import pyplot as py
from sklearn.datasets import load_boston

#understanding the datasets
boston = load_boston()
print(boston.DESCR)

#access data attributes
dataset = boston.data
for name, index in enumerate(boston.feature_names):
  print(index, name)

#reshaping data
data = dataset[:,12].reshape(-1,1)

#shape of the data
np.shape(dataset)

#target value
target = boston.target.reshape(-1,1)

#shape of target
np.shape(target)

# Commented out IPython magic to ensure Python compatibility.
#ensuring that matplotlib works inside the notebook
# %matplotlib inline
py.scatter(data, target, color='green')
py.xlabel('Lower Status')
py.ylabel('Cost of Houses')
py.show()

#regression
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge
#creating regression model
reg = LinearRegression()

#fir the model
reg.fit(data, target)

#prediction
pred = reg.predict(data)

# Commented out IPython magic to ensure Python compatibility.
#ensuring that matplotlib works inside the notebook
# %matplotlib inline
py.scatter(data, target, color='purple')
py.plot(data, pred, color='cyan')
py.xlabel('Lower Status')
py.ylabel('Cost of Houses')
py.show()

#creating regression model
rid = Ridge()

#fir the model
rid.fit(data, target)

#prediction
pred = rid.predict(data)

# Commented out IPython magic to ensure Python compatibility.
#ensuring that matplotlib works inside the notebook
# %matplotlib inline
py.scatter(data, target, color='purple')
py.plot(data, pred, color='cyan')
py.xlabel('Lower Status')
py.ylabel('Cost of Houses')
py.show()

# circumpenting the curve issue using polynomial
from sklearn.preprocessing import PolynomialFeatures
#to allow merging of models 
from sklearn.pipeline import make_pipeline

model = make_pipeline(PolynomialFeatures(6), reg)

model.fit(data,target)

pred = model.predict(data)

# Commented out IPython magic to ensure Python compatibility.
#ensuring that matplotlib works inside the notebook
# %matplotlib inline
py.scatter(data, target, color='purple')
py.plot(data, pred, color='cyan')
py.xlabel('Lower Status')
py.ylabel('Cost of Houses')
py.show()

#using r square metric     r2 ranges from -1 to 1    
from sklearn.metrics import r2_score
#predict
r2_score(pred, target)